#include<bits/stdc++.h>
using namespace std;
 bool isPalindrome(string s) {
        string str;
        for(int i=0;i<s.size();i++){
            if(s[i]>='A' && s[i]<='Z'){
                char c= s[i]+'a'-'A';
                str=str+c;
            }
            else if((s[i]>='a' && s[i]<='z')||(s[i]>=0 && s[i]<=9)){
                str=str+s[i];
            }
        }
        int n=str.size();
        for(int i=0;i<=(n/2);i++){
             if(str[i]!=str[n-i-1]){
                 return false;
             }
        }
        return true;

    }
int main(){
    string s;
    getline(cin,s);
    cout<<isPalindrome(s);
    return 0;
}

///A phrase is a palindrome if, after converting all uppercase letters into lowercase letters 
and removing all non-alphanumeric characters, 
it reads the same forward and backward. Alphanumeric characters include letters and numbers.

Given a string s, return true if it is a palindrome, or false otherwise.

class Solution {
public:
    void upper(string &s){
        for(int i=0;i<s.size();i++){
            if(s[i]>='A' && s[i]<='Z'){
                s[i]=s[i]+'a'-'A';
            }
        }
    }
    void alpha(string &s){
        string temp;
        for(int i=0;i<=s.length();i++){
            if((s[i]>='a'&&s[i]<='z')||(s[i]>='0'&&s[i]<='9')){
                temp+=s[i];
            }    
        }
        s=temp;
    }
    bool check(string &s,int i,int j){
        if(i>=j)
           return true;
        if(s[i]!=s[j])
           return false;
        return check(s,i+1,j-1);
    }
    bool isPalindrome(string s) {
        upper(s);
        alpha(s);
        cout<<s;
        return check(s,0,s.length()-1);

    }
};
